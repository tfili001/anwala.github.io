<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

  <html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
    <head>
      
      <meta content="text/html; charset=utf-8" http-equiv="content-type"/>
      <title>zcrmsdk 0.0.1 : Python Package Index</title>
      <meta content="development"/>
      <meta content="Zoho CRM SDK for Python developers"/>
       <link rel="alternate" type="application/rss+xml" title="RSS: 40 latest updates" href="https://pypi.python.org/pypi?:action=rss"/>
       <link rel="alternate" type="application/rss+xml" title="RSS: 40 newest packages" href="https://pypi.python.org/pypi?:action=packages_rss"/>
       <link rel="stylesheet" media="screen" href="/static/styles/screen-switcher-default.css" type="text/css"/>
       <link media="screen" href="/static/styles/netscape4.css" type="text/css" rel="stylesheet"/>
       <link media="print" href="/static/styles/print.css" type="text/css" rel="stylesheet"/>
       <link media="screen" href="/static/styles/largestyles.css" type="text/css" rel="alternate stylesheet" title="large text"/>
       <link media="screen" href="/static/styles/defaultfonts.css" type="text/css" rel="alternate stylesheet" title="default fonts"/>
       <link rel="stylesheet" media="screen" href="/static/css/docutils.css" type="text/css"/>
       <link rel="stylesheet" media="screen" href="/static/css/pygments.css" type="text/css"/>

       <!-- allow pypi to override the standard pydotorg/docutils/etc. styles -->
       <link rel="stylesheet" href="/static/css/pypi.css" type="text/css"/>
       <link media="screen" rel="stylesheet" href="/static/css/pypi-screen.css" type="text/css"/>

       
       <meta name="google-site-verification" content="NSgF04qslVV4P7nymxJDSkWVK09zfdPTxgZfU3dNSoQ"/>
       

       
 <meta name="keywords" content="development"/>
 <meta name="description" content="Zoho CRM SDK for Python developers"/>
 <link rel="meta" title="DOAP" type="application/rdf+xml" href="/pypi?:action=doap&amp;name=zcrmsdk&amp;version=0.0.1"/>
 <style type="text/css">
  table.form th {white-space: pre;}
 </style>


       <style type="text/css">
       </style>
    </head>
    <body>
     

      <!--  Logo  -->
      <h1 id="logoheader">
       <a accesskey="1" href="http://www.python.org" id="logolink">
          <img src="/static/images/python-logo.png" alt="homepage" border="0" id="logo"/>
       </a>
      </h1>
      <!--  Skip to Navigation  -->
      <div class="skiptonav"><a accesskey="2" href="#left-hand-navigation"><img src="/static/images/trans.gif" alt="skip to navigation" border="0" id="skiptonav"/></a></div>
      <div class="skiptonav"><a accesskey="3" href="#content-body"><img src="/static/images/trans.gif" alt="skip to content" border="0" id="skiptocontent"/></a></div>
      <!--  Utility Menu  -->

      <div id="utility-menu">
        <!--  Search Box  -->
        <div id="searchbox">
          <form id="searchform" method="get" name="searchform" action="/pypi">
            <input type="hidden" name=":action" value="search"/>
            <div id="search">
              <input class="input-text" id="term" name="term" autofocus="autofocus"/>
              <input class="input-button" type="submit" name="submit" value="search" id="submit"/>
            </div>
          </form>
        </div>
<!-- XXX: reinstate this       <div id="screen-switcher"></div> -->
      </div>
      <div id="left-hand-navigation">

        <!--  Main Menu NEED LEVEL TWO HEADER AND FOOTER -->
        <div id="menu">
          <ul class="level-one">
            <li class="selected">
              <a class="selected" href="/pypi">Package Index</a>

              <ul class="level-two">

                
                  <li class=""><a class="" href="/pypi?%3Aaction=browse">Browse&nbsp;packages</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=list_classifiers">List&nbsp;trove&nbsp;classifiers</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=rss">RSS&nbsp;(latest&nbsp;40&nbsp;updates)</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=packages_rss">RSS&nbsp;(newest&nbsp;40&nbsp;packages)</a></li>
                
        <li><a href="/tos">Terms of Service</a></li>
        <li><a href="http://wiki.python.org/moin/CheeseShopTutorial">PyPI Tutorial</a></li>
        <li><a href="/security">PyPI Security</a></li>
        <li><a href="http://sourceforge.net/tracker/?group_id=66150&amp;atid=513504">PyPI Support</a></li>
        <li><a href="https://github.com/pypa/pypi-legacy/issues">PyPI Bug Reports</a></li>
        <li><a href="http://www.python.org/sigs/distutils-sig/">PyPI Discussion</a></li>
        <li><a href="http://wiki.python.org/moin/CheeseShopDev">PyPI Developer Info</a></li>
       </ul>

            </li>




            <li class=""><a href="http://www.python.org/about" class="" title="About The Python Language">About</a>
            </li><li class=""><a href="http://www.python.org/news" class="" title="">News</a>
            </li><li class=""><a href="http://www.python.org/doc" class="" title="">Documentation</a>
            </li><li class=""><a href="http://www.python.org/download" title="">Download</a>


            </li><li class=""><a href="http://www.python.org/community" class="" title="">Community</a>
            </li><li class=""><a href="http://www.python.org/psf" class="" title="Python Software Foundation">Foundation</a>
            </li><li class=""><a href="http://www.python.org/dev" class="" title="Python Core Language Development">Core Development</a>
          </li>
          </ul>
        </div>

      </div>
      <div id="content-body">
        <div id="body-main">
          <div id="content">

            <div id="breadcrumb">
              <a href="/pypi">Package Index</a>
              
                <span class="breadcrumb-separator">&gt;</span>
                <a href="/pypi/zcrmsdk">zcrmsdk</a>
              
              
                <span class="breadcrumb-separator">&gt;</span>
                <a href="/pypi/zcrmsdk/0.0.1">0.0.1</a>
              

            </div>

            <div id="document-floating">

            <div id="document-navigation" style="overflow-y: auto; max-height: 15em; overflow-x: hidden;">
		
                  <h4>Not Logged In</h4>

                  <ul>
		    
                    <li><a href="/pypi?%3Aaction=login_form">Login</a></li>
                    <li><a href="/pypi?%3Aaction=register_form">Register</a></li>
                    <li><a href="/pypi?%3Aaction=forgotten_password_form">Lost Login?</a></li>
		    <li><a href="/openid_login">Login with OpenID</a>
                      
                        <a style="border: none;" href="/openid_login?provider=Launchpad"><img width="16" height="16" alt="Launchpad" src="https://launchpad.net/@@/launchpad.png" title="Launchpad"/></a>
                      
                    </li>
                    <li><a href="/google_login">Login with Google<img width="16" height="16" src="https://www.google.com/favicon.ico" title="Google Login" alt="Google Login"/></a></li>
                  </ul>

		

		

                <div id="statusdiv">
                </div>
            </div>
        </div>
        


            <div class="section">
              <h1>zcrmsdk 0.0.1</h1>

              
<div id="download-button">
 
 <a class="button green" style="float:right;" href="#downloads">Downloads &darr;</a>
</div>

<p style="font-style: italic">Zoho CRM SDK for Python developers</p>








#Zoho CRM SDK For Python<br>-----------------------<br>Python SDK for Zoho CRM APIs provides wrapper for Zoho CRM APIs. Hence invoking a Zoho CRM API from your python client application is just a method call.<br><br>Python SDK supports both single user as well as multi-user authentication.<br><br>Registering a Zoho Client<br>-------------------------<br>Since Zoho CRM APIs are authenticated with OAuth2 standards, you should register your client app with Zoho. <br>To register your app:<br><br>- Visit this page https://accounts.zoho.com/developerconsole<br>- Click on “Add Client ID”.<br>- Enter Client Name, Client Domain and Redirect URI then click “Create”.<br>- Your Client app would have been created and displayed by now.<br>- The newly registered app's Client ID and Client Secret can be found by clicking Options → Edit.<br>(Options is the three dot icon at the right corner).<br><br>Setting Up<br>----------<br>Python SDK is installable through **pip**. Pip is a tool for dependency management in Python. The library expects following things from the client app<br><br>Client app must have Python 2.7.<br>&gt;https://www.python.org/downloads/<br><br>Client app must have python requests being installed<br>&gt;http://docs.python-requests.org/en/master/user/install/<br><br>- SDK must be installed through pip.<br>- The method `ZCRMRestClient.initialize()` must be called on starting up of your application<br><br>&gt;MySQL should run in the same machine serving at the default port 3306.  <br>The database name should be "zohooauth".  <br>There must be a table "oauthtokens" with the columns "useridentifier"(varchar(100)), "accesstoken"(varchar(100)), "refreshtoken"(varchar(100)), "expirytime"(bigint). <br><br>If ``token_persistence_path`` provided in ``oauth_configuration.properties`` file, then persistence happens in file only. In this case, no need of MySQL<br><br>Create a empty file with name **zcrm_oauthtokens.pkl** in the mentioned ``token_persistence_path``<br><br>Installation of SDK through pip<br>-------------------------------<br>Install Pip(if not installed)<br>Please refer the document below to install pip<br><br>&gt;https://pip.pypa.io/en/stable/installing/<br><br>Install SDK<br>-----------<br>Run the following command to install the SDK:<br><br>&gt;pip install zcrmsdk<br><br>By this SDK would have installed and a package named ``zcrmsdk`` would have been created in the installation directory of python (ex. '/Library/Python/2.7/site-packages').<br><br>Upgrade the SDK<br>---------------<br>Run this command to upgrade the SDK to the latest version.<br><br>&gt;pip install --upgrade zcrmsdk<br><br>Configurations<br>--------------<br>Your OAuth Client details should be given to the SDK as a property file.  <br>In SDK, we have placed a configuration file (oauth_configuration.properties).   <br>Please place the respective values in that file. You can find that file under 'zcrmsdk/resources'.  <br>Please fill the values for the following keys alone.<br><br>&gt;client_id=  <br>client_secret=  <br>redirect_uri=  <br>accounts_url=https://accounts.zoho.com  <br>token_persistence_path=  <br><br>client_id, client_secret and redirect_uri are your OAuth client’s configurations that you get after registering your Zoho client.<br><br>access_type must be set to offline only because online OAuth client is not supported by the SDK as of now.<br><br>``token_persistence_path`` is the path to store the OAuth related tokens in file. If this is set then, no need of `database` for persistence. Persistence happens through `file` only.<br><br>Based on your domain(EU,CN) please change the value of `accounts_url`. Default value set as US domain<br><br>Include the absolute path in **configuration.properties** for the key ``applicationLogFilePath`` to store the logs. You can find that file under `zcrmsdk/resources`. This file is to log the exceptions during the usage of SDK.<br><br>Please fill the value for the following key alone. If log path is not provided then logs won't be stored but you can see them in console<br><br>&gt;applicationLogFilePath=<br><br>If your application needs only single user authentication then you have to set the user Email Id in configurations.properties file like below.<br><br>&gt;currentUserEmail=user@email.com<br><br>In order to work with multi user authentication, you need to set the user EmailId in current thread as an attribute.<br><br>&gt;threading.current_thread().__setattr__('current_user_email','user@email.com')<br><br>You can use the above one for single user authentication also but it's recommended to go with setting of email Id in ``configuration.properties`` file.<br><br>If you don't set the user email in current thread then SDK expect it from ``configuration.properties`` file. <br><br>If user email is not set in any of these two then SDK will raise exception.<br><br>Initialization<br>--------------<br>The app would be ready to be initialized after defining the OAuth configuration file.<br><br>Generating self-authorized grant token<br>For self client apps, the self authorized grant token should be generated from the Zoho Developer Console (https://accounts.zoho.com/developerconsole)<br><br>- Visit https://accounts.zoho.com/developerconsole<br>- Click Options → Self Client of the client for which you wish to authorize.<br>- Enter one or more (comma separated) valid Zoho CRM scopes that you wish to authorize in the “Scope” field and choose the time of expiry. Provide “aaaserver.profile.READ” scope along with Zoho CRM scopes.<br>- Copy the grant token for backup<br>- Generate refresh_token from grant token by using below URL (POST request)<br> ``https://accounts.zoho.com/oauth/v2/token?code={grant_token}&amp;redirect_uri={redirect_uri}&amp;client_id={client_id}&amp;client_secret={client_secret}&amp;grant_type=authorization_code``<br><br>Copy the refresh_token for backup<br><br>Please note that the generated grant token is valid only for the stipulated time you choose while generating it. <br><br>Hence, refresh token should be generated within that time.<br><br>Generating access token<br>-----------------------<br>The following code snippet should be executed from your main class to get access token. <br><br>Please paste the generated refresh token in the string literal mentioned. This is one time process only.<br><br>&gt;ZCRMRestClient.initialize()  <br>oauth_client = ZohoOAuth.get_client_instance()  <br>refresh_token="paste_refresh_token_here"  <br>user_identifier="provide_user_identifier_like_email_here"  <br>oauth_tokens = oauth_client.generate_access_token_from_refresh_token(refresh_token,user_identifier)  <br><br>Upon successful execution of the above code snippet, the generated access and given refresh tokens would have been persisted through our persistence handler class.<br><br>Once the OAuth tokens have been persisted, subsequent API calls would use the persisted access and refresh tokens. <br><br>The SDK will take care of refreshing the access token using refresh token, as and when required.<br><br>App Startup<br>------------<br>The SDK requires the following line of code invoked every time your client app is started.<br><br>&gt;ZCRMRestClient.initialize()<br><br>Once the SDK has been initialized by the above line, you could use any APIs of the library to get proper results.<br><br>Using the SDK<br>-------------<br>Add the below line in your client app Python files, where you would like to make use of SDK.<br><br>&gt;import zcrmsdk<br><br>By this, you can access all the functionalities of the Python SDK.<br><br>For accessing a module or class use ``zcrmsdk.ClassName``<br><br><br>Class Hierarchy<br>---------------<br>All Zoho CRM entities are modelled as modules having classes, methods and instance variables applicable to that particular entity. ZCRMRestClient is the base class of the SDK. ZCRMRestClient has methods to get instances of various other Zoho CRM entities. It is in RestClient module.<br>The class relations and hierarchy of the library follows the entity hierarchy inside Zoho CRM. The class hierarchy of various Zoho CRM entities are given below:<br><br><br> - ZCRMRestClient<br>   - ZCRMOrganization<br>     - ZCRMUser<br>       - ZCRMUserTheme<br>         - ZCRMUserCustomizeInfo<br>       - ZCRMRole<br>       - ZCRMProfile<br>         - ZCRMPermission<br>         - ZCRMProfileSection<br>           - ZCRMProfileCategory<br>     - ZCRMModule<br>       - ZCRMLayout<br>         - ZCRMSection<br>           - ZCRMField<br>           - ZCRMPickListValue<br>           - ZCRMLookupField<br>       	 - ZCRMLeadConvertMapping<br>           - ZCRMLeadConvertMappingField<br>       - ZCRMCustomView<br>         - ZCRMCustomViewCategory<br>         - ZCRMCustomViewCriteria<br>       - ZCRMRelatedListProperties<br>         - ZCRMModuleRelatedList<br>       - ZCRMRecord<br>       - ZCRMNote<br>       - ZCRMAttachment<br>       - ZCRMInventoryLineItem<br>         - ZCRMTax<br>       - ZCRMEventParticipant<br>       - ZCRMPriceBookPricing<br>       - ZCRMModuleRelation<br>       - ZCRMJunctionRecord<br>       - ZCRMTrashRecord<br><br>As appearing in the hierarchy, every entity class will have instance variables to fetch its own properties and to fetch data of its immediate child entities through an API call.<br><br>For example, a Zoho CRM module (ZCRMModule) object will have instance variables to get a module’s properties like display name, module id, etc. and will also have instance variables to fetch all its child objects(like ZCRMLayout).<br><br>Instantiate object<br>------------------<br>It is not always effective to follow the complete class hierarchy from the top to fetch the data of an entity at some lower level, since this would involve API calls at each level. <br><br>In order to handle this, every entity class will have a ``get_instance()`` method to get its own dummy object and instance variables to get dummy objects of its child entities.<br><br>Please note that the get_instance() method would not have any of its properties filled because it would not fire an API call. This would just return a dummy object that shall be only used to access the non-static methods of the class.<br><br>Summing it up<br>-------------<br>``ZCRMRestClient.get_module("Contacts")`` would return the actual Contacts module, that has all the properties of the Contacts module filled through an API call<br><br>``ZCRMRestClient.get_module_instance("Contacts")`` would return a dummy ZCRMModule object that would refer to the Contacts module, with no properties filled, since this doesn’t make an API call.<br><br>Hence, to get records from a module, you need not to start all the way from ZCRMRestClient. Instead, you could get a ZCRMModule instance with ZCRMModule.get_instance() and then invoke its non-static get_records() method from the created instance. <br><br>This would avoid the API call which would have been triggered to populate the ZCRMModule object.<br><br>Accessing record properties<br>----------------------------<br>Since record properties are dynamic across modules, we have only given the common fields like created_time, created_by, owner etc. as ZCRMRecord’s default properties. <br><br>All other record properties are available as a dictionary in ZCRMRecord object.<br><br>To access the individual field values of a record, use the getter and setter methods available. <br><br>The keys of the record properties dictionary are the API names of the module’s fields. <br><br>API names of all fields of all modules are available under ``Setup → Extensions &amp; APIs → APIs → CRM API → API Names``.<br><br>To get a field value, use ``record.get_field_value(field_api_name)``. <br><br>To set a field value, use ``record.set_field_value(field_api_name,new_value)``. <br><br>While setting a field value, please make sure of that the set value is of the apt data type of the field to which you are going to set it.<br><br>Response Handling<br>-----------------<br>``APIResponse`` and ``BulkAPIResponse`` are wrapper objects for Zoho CRM APIs’ responses. All API calling methods would return one of these two objects.<br><br>DownloadFile and downloadPhoto returns ``FileAPIResponse`` instead of APIResponse.<br><br>A method seeking a single entity would return APIResponse object, whereas a method seeking a list of entities would return BulkAPIResponse object.<br><br>Use the instance variable **data** to get the entity data alone from the response wrapper objects. APIResponse.data would return a single Zoho CRM entity object, while BulkAPIResponse.data would return a list of Zoho CRM entity objects.<br><br>Other than data, these response wrapper objects have the following properties:<br><br>``response_headers`` — remaining API counts for the present day/window and time elapsed for the present window reset.<br><br>``info`` — any other information, if provided by the API, in addition to the actual data.<br><br>``bulk_entity_response`` (list of ``EntityResponse`` instances) — status of individual entities in a bulk API. For example, in an insert records API may partially fail because of a few records. This array gives the individual records’ creation status.<br>Exceptions<br><br>All unexpected behaviors like faulty API responses, library anomalies are handled by the SDK and are raised only as a single exception — ZCRMException. Hence its enough to catch this exception alone in the client app code.<br><br><br>Examples<br>---------<br>Sample code to insert a record:<br>-------------------------------<br><br>&gt;try:  <br>  record_ins_list=list()  <br>  for i in range(0,2):  <br>  	record=ZCRMRecord.get_instance('Invoices') #module API Name  <br>   	record.set_field_value('Subject', 'Invoice'+str(i))  <br>   	record.set_field_value('Account_Name', 'IIIT')  <br>   	user=ZCRMUser.get_instance(440872000000175001,'Python Automation User1')  <br>   	record.set_field_value('Owner',user)  <br>   	line_item=ZCRMInventoryLineItem.get_instance(ZCRMRecord.get_instance("Products",440872000000224005))  <br>   	line_item.discount=10  <br>   	line_item.list_price=8  <br>   	line_item.description='Product Description'  <br>   	line_item.quantity=100  <br>   	line_item.tax_amount=2.5  <br>   	taxIns=ZCRMTax.get_instance("Vat")  <br>   	taxIns.percentage=5  <br>   	line_item.line_tax.append(taxIns)  <br>   	record.add_line_item(line_item)  <br>   	record_ins_list.append(record)  <br>   	resp=ZCRMModule.get_instance('Invoices').create_records(record_ins_list)  <br>   	print resp.status_code  <br>   	entity_responses=resp.bulk_entity_response  <br>   	for entity_response in entity_responses:  <br>        	print entity_response.details  <br>        	print entity_response.status  <br>        	print entity_response.message  <br>        	print entity_response.code  <br>        	print entity_response.data.entity_id  <br>        	print entity_response.data.created_by.id  <br>        	print entity_response.data.created_time  <br>        	print entity_response.data.modified_by.id  <br>except ZCRMException as ex:  <br>    print ex.status_code  <br>    print ex.error_message  <br>    print ex.error_code  <br>    print ex.error_details  <br>    print ex.error_content  <br><br><br>Sample code to fetch records:<br>-----------------------------<br><br>&gt;try:  <br>	module_ins=ZCRMModule.get_instance('Products') #module API Name  <br>	resp=module_ins.get_records()  <br>	print resp.status_code  <br>	record_ins_arr=resp.data  <br>	for record_ins in record_ins_arr:  <br>		print record_ins.entity_id  <br>		print record_ins.owner.id  <br>		print record_ins.created_by.id  <br>		print record_ins.modified_by.id  <br>		print record_ins.created_time  <br>		print record_ins.modified_time  <br>		product_data=record_ins.field_data  <br>		for key in product_data:  <br>			print key+":"+str(product_data[key])  <br>except ZCRMException as ex:  <br>	print ex.status_code  <br>	print ex.error_message  <br>	print ex.error_code  <br>	print ex.error_details  <br>	print ex.error_content  <br><br>For more APIs, please refer [this link](https://www.zoho.com/crm/help/api/v2/#api-reference)<br><br><br>

<a name="downloads">&nbsp;</a>
<table class="list" style="margin-bottom: 10px;">
<tr>
  <th>File</th>
  <th>Type</th>
  <th>Py Version</th>
  <th>Uploaded on</th>
  <th style="text-align: right;">Size</th>
</tr>

<tr class="odd">

    <td>
    <span style="white-space: nowrap;">
      <a href="https://pypi.python.org/packages/99/e2/8fdc9a2197411c8bc9d8b7de95804b0390edfc0e4fa7be30a599f8da4c70/zcrmsdk-0.0.1-py2.py3-none-any.whl#md5=f0365d68ad61eee618281bfcacbb5268">zcrmsdk-0.0.1-py2.py3-none-any.whl</a>
      (<a title="MD5 Digest" href="/pypi?:action=show_md5&amp;digest=f0365d68ad61eee618281bfcacbb5268">md5</a>)
    </span>
    
        </td>
  <td style="white-space: nowrap;">
    Python Wheel
  </td>
  <td>
    py2.py3
  </td>
  <td>2018-02-13</td>
  <td style="text-align: right;">50KB</td>

</tr>
<tr class="even">

    <td>
    <span style="white-space: nowrap;">
      <a href="https://pypi.python.org/packages/26/a2/213446b02e0f26f69e18960ed48c5034019782e06c21f370e0dd73cc7af3/zcrmsdk-0.0.1.tar.gz#md5=1ae8ce075818bb2675940074d94f0bab">zcrmsdk-0.0.1.tar.gz</a>
      (<a title="MD5 Digest" href="/pypi?:action=show_md5&amp;digest=1ae8ce075818bb2675940074d94f0bab">md5</a>)
    </span>
    
        </td>
  <td style="white-space: nowrap;">
    Source
  </td>
  <td>
    
  </td>
  <td>2018-02-13</td>
  <td style="text-align: right;">45KB</td>

</tr>

<tr><td id="last" colspan="6"/></tr>
  </table>



<ul class="nodot">
 <li>
  <strong>Author:</strong>
  <span>Zoho CRM API Team</span>
 </li>

 

 

<!-- The <th> elements below are a terrible terrible hack for setuptools -->
 <li>
  <strong>Home Page:</strong>
  <!-- <th>Home Page -->
  <a href="https://github.com/zoho/zcrm-python-sdk">https://github.com/zoho/zcrm-python-sdk</a>
 </li>


 

 


 <li>
  <strong>Keywords:</strong>
  <span>development</span>
 </li>

 

 

<!-- TODO: add link to products in follow dependencies... -->
 
 
 

 <li>
  <strong>Categories</strong>
  <ul class="nodot">
   <li>
    <a href="/pypi?:action=browse&amp;c=5">Development Status :: 5 - Production/Stable</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=30">Intended Audience :: Developers</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=532">Programming Language :: Python :: 2.7</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=533">Programming Language :: Python :: 3</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=566">Programming Language :: Python :: 3.3</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=587">Programming Language :: Python :: 3.4</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=607">Programming Language :: Python :: 3.5</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=408">Topic :: Software Development :: Build Tools</a>
   </li>
  </ul>
 </li>



 <li>
   <strong>Requires Distributions</strong>
   <ul class="nodot">
     <li>
       <a href="https://pypi.python.org/pypi/requests">requests</a>
        
     </li>
   </ul>
 </li>

 

 

 

 


 <li>
  <strong>Package Index Owner:</strong>
  <span>zohocrm</span>
 </li>

 

 <li>
  <strong><a href="https://github.com/edumbill/doap/wiki">DOAP</a> record:</strong>
  <a href="/pypi?:action=doap&amp;name=zcrmsdk&amp;version=0.0.1">zcrmsdk-0.0.1.xml</a>
 </li>

</ul>





            </div>


          </div>
          <div id="footer">
            <div id="credits">
              <div style="float: left; margin-right: 1em;" id="badges">
                
                <img src="https://img.shields.io/badge/ipv6-go!-green.svg" alt="ipv6 ready" title="ipv6 ready" border="0"/><br/>
                <img src="https://img.shields.io/badge/http2-go!-green.svg" alt="http2 ready" title="http2 ready" border="0"/><br/>
                
                <img src="/static/images/PythonPoweredAnimSmall.gif" alt="darn right it is" title="Python Powered" border="0"/>
              </div>
              <div style="float: right" id="donations">
                <a href="http://www.python.org/about/website">Website maintained by the Python community</a><br/>
                <a href="https://www.fastly.com/" title="Real-time CDN services provided by Fastly">Real-time CDN by Fastly</a> /
                <a href="http://developer.rackspace.com/" title="Server hosting by Rackspace Open Source support">Hosting by Rackspace</a><br/>
                <a href="https://aws.amazon.com/s3/" title="Object storage provided by Amazon S3">Object storage by Amazon S3</a> /
                <a href="http://www.timparkin.co.uk/" title="Design by Tim Parkin, Yorkshire man, photographer and developer">Design by Tim Parkin</a>
              </div>
            </div>
            Copyright © 1990-2018, <a href="http://www.python.org/psf">Python Software Foundation</a><br/>
            <a href="https://pypi.org/policy/terms-of-use/">Terms of Use</a>
          </div>
        </div>
      </div>

      
      <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

        ga('create', 'UA-55961911-1', 'auto');
        ga('require', 'linkid', 'linkid.js');
        ga('send', 'pageview');
      </script>
      

      <script type="text/javascript" src="//statuspage-production.s3.amazonaws.com/se-v2.js">
      </script>
      <script type="text/javascript">
        var sp = new StatusPage.page({ page : '2p66nmmycsj3' });
        sp.summary({
          // <![CDATA[
          success: function(data) {
            var div = document.getElementById('statusdiv');
            var reports = "</br><h4 id='statusbox'>Status</h4>\n";
            var outage = 0;
            var maintenance = 0;
            for (i in data.incidents) {
              var incident = data.incidents[i];
              var message, status = incident.status;
              if (status === 'scheduled') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' scheduled.</a></li>\n';
                reports += message;
                maintenance += 1;
              } else if (status === 'in_progress') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' is currently in progress.' + '</a></li>\n';
                reports += message;
                maintenance += 1;
              } else if (status !== 'resolved' && status !== 'postmortem' && status !== 'completed') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ': ' + incident.status + '</a></li>\n';
                reports += message;
                outage += 1;
              }
            }
            for (i in data.scheduled_maintenances) {
              var incident = data.scheduled_maintenances[i];
              var message, status = incident.status;
              if (status === 'scheduled') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' scheduled.</a></li>\n';
                reports += message;
                maintenance += 1;
              } else if (status === 'in_progress') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' is currently in progress.' + '</a></li>\n';
                reports += message;
                maintenance += 1;
              } else if (status !== 'resolved' && status !== 'postmortem' && status !== 'completed') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ': ' + incident.status + '</a></li>\n';
                reports += message;
                outage += 1;
              }
            }
            if (outage + maintenance === 0) {
              reports += "<li><a href='http://status.python.org'>Nothing to report</a></li>";
            }
            div.innerHTML=reports;
            if (outage > 0) {
              var statusbox = document.getElementById("statusbox");
              statusbox.style.background = '#FC234A';
            }
          }
          // ]]>
        });
      </script>

    </body>
  </html>

